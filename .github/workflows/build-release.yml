name: Build and Release

on:
  # 手动执行
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (留空则自动从pyproject.toml获取)'
        required: false
        type: string
      create_release:
        description: '是否创建GitHub Release'
        required: false
        default: true
        type: boolean
      publish_pypi:
        description: '是否发布到PyPI'
        required: false
        default: true
        type: boolean
      prerelease:
        description: '是否为预发布版本'
        required: false
        default: false
        type: boolean

  # 项目更新时执行（暂时注释掉）
  # push:
  #   branches: [ master ]
  #   tags: [ 'v*' ]

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # 用于创建release
      id-token: write  # 用于PyPI可信发布

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史，用于分支操作

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools

    - name: Get version number
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          # 使用手动输入的版本号
          VERSION="${{ github.event.inputs.version }}"
          echo "使用手动输入的版本号: $VERSION"
          # 更新pyproject.toml中的版本号
          sed -i 's/version = ".*"/version = "'$VERSION'"/' pyproject.toml
          echo "已更新pyproject.toml中的版本号"
        else
          # 从pyproject.toml自动获取版本号，使用Python解析
          VERSION=$(python -c "import re; content=open('pyproject.toml').read(); match=re.search(r'^version\s*=\s*[\"\'](.*?)[\"\']', content, re.MULTILINE); print(match.group(1) if match else '')")

          # 如果Python解析失败，使用sed备用方案
          if [ -z "$VERSION" ]; then
            echo "Python解析失败，使用sed备用方案"
            VERSION=$(sed -n 's/^version = "\(.*\)"$/\1/p' pyproject.toml | head -1)
          fi

          echo "从pyproject.toml获取版本号: $VERSION"
        fi

        # 调试信息
        echo "🔍 调试信息:"
        echo "  获取到的版本号: '$VERSION'"
        echo "  版本号长度: ${#VERSION}"
        echo "  版本号字符: $(echo -n "$VERSION" | od -c)"

        # 验证版本号不为空
        if [ -z "$VERSION" ]; then
          echo "❌ 版本号为空"
          echo "📋 pyproject.toml内容:"
          cat pyproject.toml
          exit 1
        fi

        # 验证版本号格式
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
          echo "❌ 版本号格式不正确: '$VERSION'"
          echo "预期格式: x.y 或 x.y.z"
          echo "📋 pyproject.toml中包含version的行:"
          grep -n "version" pyproject.toml
          exit 1
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
        echo "✅ 最终版本号: $VERSION"

    - name: Build wheel and source distribution
      run: |
        python -m build
        echo "构建完成"
        ls -la dist/

    - name: Check distribution
      run: |
        python -m twine check dist/*

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ steps.version.outputs.tag_name }}"
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_TAG" ]; then
          echo "生成从 $PREVIOUS_TAG 到 $VERSION 的变更日志"
          CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD | head -20)
        else
          echo "生成首次发布的变更日志"
          CHANGELOG=$(git log --pretty=format:"- %s" | head -10)
        fi

        cat > CHANGELOG.md << EOF
        ## 🚀 新版本发布: $VERSION

        ### 📝 变更内容
        $CHANGELOG

        ### 📦 安装方式
        \`\`\`bash
        pip install pt-checkin==${{ steps.version.outputs.version }}
        \`\`\`

        ### 🔗 相关链接
        - [PyPI包地址](https://pypi.org/project/pt-checkin/${{ steps.version.outputs.version }}/)
        - [使用文档](https://github.com/${{ github.repository }}/blob/${{ steps.version.outputs.tag_name }}/README.md)
        - [青龙面板支持](https://github.com/${{ github.repository }}/tree/ql)
        EOF

    - name: Create GitHub Release
      if: ${{ github.event.inputs.create_release == 'true' }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: Release ${{ steps.version.outputs.tag_name }}
        body_path: CHANGELOG.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true

    - name: Publish to PyPI
      if: ${{ github.event.inputs.publish_pypi == 'true' }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true
        verbose: true

    - name: Sync config to ql branch
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # 检查ql分支是否存在
        if git show-ref --verify --quiet refs/remotes/origin/ql; then
          echo "ql分支存在，开始同步配置文件"

          # 切换到ql分支
          git checkout ql
          git pull origin ql

          # 从master分支复制config_example.yml
          git checkout master -- config_example.yml

          # 复制到根目录
          cp config_example.yml config_example.yml

          # 提交更改
          git add config_example.yml
          if git diff --staged --quiet; then
            echo "配置文件无变化，跳过提交"
          else
            git commit -m "sync: 发布 ${{ steps.version.outputs.tag_name }} 后同步配置文件"
            git push origin ql
            echo "✅ 配置文件同步完成"
          fi
        else
          echo "ql分支不存在，跳过配置文件同步"
        fi

    - name: Create summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## 🎉 构建完成: ${{ steps.version.outputs.tag_name }}

        ### 📦 构建产物
        - Wheel: \`$(ls dist/*.whl | xargs basename)\`
        - Source: \`$(ls dist/*.tar.gz | xargs basename)\`

        ### 🔗 执行结果
        - GitHub Release: ${{ github.event.inputs.create_release == 'true' && '✅ 已创建' || '❌ 跳过' }}
        - PyPI发布: ${{ github.event.inputs.publish_pypi == 'true' && '✅ 已发布' || '❌ 跳过' }}
        - 配置同步: ✅ 已执行

        ### 📋 访问链接
        - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag_name }})
        - [PyPI Package](https://pypi.org/project/pt-checkin/${{ steps.version.outputs.version }}/)

        ### 📋 安装命令
        \`\`\`bash
        pip install pt-checkin==${{ steps.version.outputs.version }}
        \`\`\`
        EOF
