name: Build and Release

on:
  # 手动执行
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: 1.2.0)'
        required: true
        type: string
      prerelease:
        description: '是否为预发布版本'
        required: false
        default: false
        type: boolean

  # 项目更新时执行（暂时注释掉）
  # push:
  #   branches: [ master ]
  #   tags: [ 'v*' ]

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # 用于创建release
      id-token: write  # 用于PyPI可信发布

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史，用于分支操作

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools

    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ github.event.inputs.version }}"
        sed -i 's/version = ".*"/version = "'$VERSION'"/' pyproject.toml
        echo "已更新版本号为: $VERSION"
        grep 'version = ' pyproject.toml

    - name: Build wheel and source distribution
      run: |
        python -m build
        echo "构建完成"
        ls -la dist/

    - name: Check distribution
      run: |
        python -m twine check dist/*

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="v${{ github.event.inputs.version }}"
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_TAG" ]; then
          echo "生成从 $PREVIOUS_TAG 到 $VERSION 的变更日志"
          CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD | head -20)
        else
          echo "生成首次发布的变更日志"
          CHANGELOG=$(git log --pretty=format:"- %s" | head -10)
        fi

        cat > CHANGELOG.md << EOF
        ## 🚀 新版本发布: $VERSION

        ### 📝 变更内容
        $CHANGELOG

        ### 📦 安装方式
        \`\`\`bash
        pip install pt-checkin==${{ github.event.inputs.version }}
        \`\`\`

        ### 🔗 相关链接
        - [PyPI包地址](https://pypi.org/project/pt-checkin/${{ github.event.inputs.version }}/)
        - [使用文档](https://github.com/${{ github.repository }}/blob/v${{ github.event.inputs.version }}/README.md)
        - [青龙面板支持](https://github.com/${{ github.repository }}/tree/ql)
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        body_path: CHANGELOG.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        print-hash: true
        verbose: true

    - name: Sync config to ql branch
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # 检查ql分支是否存在
        if git show-ref --verify --quiet refs/remotes/origin/ql; then
          echo "ql分支存在，开始同步配置文件"

          # 切换到ql分支
          git checkout ql
          git pull origin ql

          # 从master分支复制config_example.yml
          git checkout master -- config_example.yml

          # 如果qinglong目录不存在则创建
          mkdir -p qinglong

          # 复制到qinglong目录
          cp config_example.yml qinglong/config_example.yml

          # 提交更改
          git add qinglong/config_example.yml
          if git diff --staged --quiet; then
            echo "配置文件无变化，跳过提交"
          else
            git commit -m "sync: 发布 v${{ github.event.inputs.version }} 后同步配置文件"
            git push origin ql
            echo "✅ 配置文件同步完成"
          fi
        else
          echo "ql分支不存在，跳过配置文件同步"
        fi

    - name: Create summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## 🎉 发布完成: v${{ github.event.inputs.version }}

        ### 📦 构建产物
        - Wheel: \`$(ls dist/*.whl | xargs basename)\`
        - Source: \`$(ls dist/*.tar.gz | xargs basename)\`

        ### 🔗 发布地址
        - [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ github.event.inputs.version }})
        - [PyPI Package](https://pypi.org/project/pt-checkin/${{ github.event.inputs.version }}/)

        ### 📋 下一步
        - 用户可通过 \`pip install pt-checkin==${{ github.event.inputs.version }}\` 安装
        - 青龙面板用户可切换到 \`ql\` 分支获取最新配置
        EOF
