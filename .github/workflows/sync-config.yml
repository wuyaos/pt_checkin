name: Sync Config to QL Branch

on:
  # 当master分支的config_example.yml发生变化时自动执行
  push:
    branches: [ master ]
    paths:
      - 'config_example.yml'
  
  # 手动执行
  workflow_dispatch:
    inputs:
      force_sync:
        description: '强制同步（即使文件无变化）'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  sync-config:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Check if ql branch exists
      id: check_branch
      run: |
        if git show-ref --verify --quiet refs/remotes/origin/ql; then
          echo "branch_exists=true" >> $GITHUB_OUTPUT
          echo "ql分支存在"
        else
          echo "branch_exists=false" >> $GITHUB_OUTPUT
          echo "ql分支不存在"
        fi
    
    - name: Sync config to ql branch
      if: steps.check_branch.outputs.branch_exists == 'true'
      run: |
        echo "开始同步配置文件到ql分支"
        
        # 切换到ql分支
        git checkout ql
        git pull origin ql
        
        # 从master分支获取最新的config_example.yml
        git checkout master -- config_example.yml
        
        # 确保qinglong目录存在
        mkdir -p qinglong
        
        # 复制配置文件
        cp config_example.yml qinglong/config_example.yml
        
        # 检查是否有变化
        git add qinglong/config_example.yml
        
        if git diff --staged --quiet && [ "${{ github.event.inputs.force_sync }}" != "true" ]; then
          echo "配置文件无变化，跳过提交"
        else
          # 提交变化
          if [ "${{ github.event.inputs.force_sync }}" == "true" ]; then
            commit_msg="sync: 强制同步master分支的config_example.yml到ql分支"
          else
            commit_msg="sync: 同步master分支的config_example.yml到ql分支

自动同步触发于: ${{ github.sha }}
变更文件: config_example.yml"
          fi
          
          git commit -m "$commit_msg"
          git push origin ql
          
          echo "✅ 配置文件同步完成"
          echo "📝 提交信息: $commit_msg"
        fi
    
    - name: Create ql branch if not exists
      if: steps.check_branch.outputs.branch_exists == 'false'
      run: |
        echo "ql分支不存在，创建新分支"
        
        # 创建ql分支
        git checkout -b ql
        
        # 创建qinglong目录和文件
        mkdir -p qinglong
        cp config_example.yml qinglong/config_example.yml
        
        # 创建基本的青龙面板文件
        cat > qinglong/ck_ptsites.py << 'EOF'
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
cron: 30 8 * * *
new Env('PT站点自动签到');
"""

# PT站点自动签到脚本 - 青龙面板版本
# 请确保已安装 pt-checkin 包: pip install pt-checkin

import subprocess
import sys

def main():
    """主函数"""
    print("🚀 === PT站点自动签到开始 ===")
    
    try:
        # 执行pt-checkin命令
        result = subprocess.run([
            sys.executable, '-m', 'pt_checkin.cli', 'run'
        ], capture_output=True, text=True, cwd='/ql/scripts')
        
        print("📊 签到执行结果:")
        print(result.stdout)
        
        if result.stderr:
            print("⚠️ 错误信息:")
            print(result.stderr)
        
        if result.returncode == 0:
            print("🎉 签到任务完成")
        else:
            print(f"❌ 签到任务失败，退出码: {result.returncode}")
            
    except Exception as e:
        print(f"❌ 执行异常: {e}")

if __name__ == '__main__':
    main()
EOF
        
        cat > qinglong/notify.py << 'EOF'
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
青龙面板通知模块
"""

def send(title: str, content: str):
    """
    发送通知
    
    Args:
        title: 通知标题
        content: 通知内容
    """
    print(f"[通知] {title}")
    print(f"内容: {content}")
    print("-" * 50)
EOF
        
        # 提交新分支
        git add .
        git commit -m "feat: 创建ql分支并添加青龙面板支持文件

- 添加ck_ptsites.py青龙面板签到脚本
- 添加notify.py通知模块
- 同步config_example.yml配置文件"
        
        git push origin ql
        
        echo "✅ ql分支创建完成"
